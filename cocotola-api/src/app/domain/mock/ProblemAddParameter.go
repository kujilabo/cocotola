// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ProblemAddParameter is an autogenerated mock type for the ProblemAddParameter type
type ProblemAddParameter struct {
	mock.Mock
}

// GetIntProperty provides a mock function with given fields: name
func (_m *ProblemAddParameter) GetIntProperty(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProperties provides a mock function with given fields:
func (_m *ProblemAddParameter) GetProperties() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetStringProperty provides a mock function with given fields: name
func (_m *ProblemAddParameter) GetStringProperty(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkbookID provides a mock function with given fields:
func (_m *ProblemAddParameter) GetWorkbookID() domain.WorkbookID {
	ret := _m.Called()

	var r0 domain.WorkbookID
	if rf, ok := ret.Get(0).(func() domain.WorkbookID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.WorkbookID)
	}

	return r0
}

// NewProblemAddParameter creates a new instance of ProblemAddParameter. It also registers a cleanup function to assert the mocks expectations.
func NewProblemAddParameter(t testing.TB) *ProblemAddParameter {
	mock := &ProblemAddParameter{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

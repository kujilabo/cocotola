// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/job/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"
)

// Job is an autogenerated mock type for the Job type
type Job struct {
	mock.Mock
}

// GetJobParameter provides a mock function with given fields:
func (_m *Job) GetJobParameter() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Job) GetName() domain.JobName {
	ret := _m.Called()

	var r0 domain.JobName
	if rf, ok := ret.Get(0).(func() domain.JobName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.JobName)
	}

	return r0
}

// GetTimeout provides a mock function with given fields:
func (_m *Job) GetTimeout() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// IsAllowedConcurrentExecution provides a mock function with given fields:
func (_m *Job) IsAllowedConcurrentExecution() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *Job) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJob creates a new instance of Job. It also registers a cleanup function to assert the mocks expectations.
func NewJob(t testing.TB) *Job {
	mock := &Job{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

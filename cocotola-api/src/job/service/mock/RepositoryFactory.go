// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/kujilabo/cocotola/cocotola-api/src/job/service"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RepositoryFactory is an autogenerated mock type for the RepositoryFactory type
type RepositoryFactory struct {
	mock.Mock
}

// NewJobHistoryRepository provides a mock function with given fields: ctx
func (_m *RepositoryFactory) NewJobHistoryRepository(ctx context.Context) service.JobHistoryRepository {
	ret := _m.Called(ctx)

	var r0 service.JobHistoryRepository
	if rf, ok := ret.Get(0).(func(context.Context) service.JobHistoryRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.JobHistoryRepository)
		}
	}

	return r0
}

// NewJobStatusRepository provides a mock function with given fields: ctx
func (_m *RepositoryFactory) NewJobStatusRepository(ctx context.Context) service.JobStatusRepository {
	ret := _m.Called(ctx)

	var r0 service.JobStatusRepository
	if rf, ok := ret.Get(0).(func(context.Context) service.JobStatusRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.JobStatusRepository)
		}
	}

	return r0
}

// NewRepositoryFactory creates a new instance of RepositoryFactory. It also registers a cleanup function to assert the mocks expectations.
func NewRepositoryFactory(t testing.TB) *RepositoryFactory {
	mock := &RepositoryFactory{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

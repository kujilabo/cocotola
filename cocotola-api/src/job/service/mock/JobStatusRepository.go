// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/job/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/job/service"

	testing "testing"
)

// JobStatusRepository is an autogenerated mock type for the JobStatusRepository type
type JobStatusRepository struct {
	mock.Mock
}

// AddJobStatus provides a mock function with given fields: ctx, job
func (_m *JobStatusRepository) AddJobStatus(ctx context.Context, job service.Job) (domain.JobStatusID, error) {
	ret := _m.Called(ctx, job)

	var r0 domain.JobStatusID
	if rf, ok := ret.Get(0).(func(context.Context, service.Job) domain.JobStatusID); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(domain.JobStatusID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, service.Job) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindJobStatusByJobName provides a mock function with given fields: ctx, jobName
func (_m *JobStatusRepository) FindJobStatusByJobName(ctx context.Context, jobName domain.JobName) ([]service.JobStatus, error) {
	ret := _m.Called(ctx, jobName)

	var r0 []service.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, domain.JobName) []service.JobStatus); ok {
		r0 = rf(ctx, jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.JobStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.JobName) error); ok {
		r1 = rf(ctx, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveExpiredJobStatus provides a mock function with given fields: ctx
func (_m *JobStatusRepository) RemoveExpiredJobStatus(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveJobStatus provides a mock function with given fields: ctx, jobStatusID
func (_m *JobStatusRepository) RemoveJobStatus(ctx context.Context, jobStatusID domain.JobStatusID) error {
	ret := _m.Called(ctx, jobStatusID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.JobStatusID) error); ok {
		r0 = rf(ctx, jobStatusID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobStatusRepository creates a new instance of JobStatusRepository. It also registers a cleanup function to assert the mocks expectations.
func NewJobStatusRepository(t testing.TB) *JobStatusRepository {
	mock := &JobStatusRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	userdomain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
)

// WorkbookSearchCondition is an autogenerated mock type for the WorkbookSearchCondition type
type WorkbookSearchCondition struct {
	mock.Mock
}

// GetPageNo provides a mock function with given fields:
func (_m *WorkbookSearchCondition) GetPageNo() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetPageSize provides a mock function with given fields:
func (_m *WorkbookSearchCondition) GetPageSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetSpaceIDs provides a mock function with given fields:
func (_m *WorkbookSearchCondition) GetSpaceIDs() []userdomain.SpaceID {
	ret := _m.Called()

	var r0 []userdomain.SpaceID
	if rf, ok := ret.Get(0).(func() []userdomain.SpaceID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userdomain.SpaceID)
		}
	}

	return r0
}

// NewWorkbookSearchCondition creates a new instance of WorkbookSearchCondition. It also registers a cleanup function to assert the mocks expectations.
func NewWorkbookSearchCondition(t testing.TB) *WorkbookSearchCondition {
	mock := &WorkbookSearchCondition{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

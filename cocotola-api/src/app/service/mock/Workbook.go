// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"

	time "time"

	userdomain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
)

// Workbook is an autogenerated mock type for the Workbook type
type Workbook struct {
	mock.Mock
}

// AddProblem provides a mock function with given fields: ctx, operator, param
func (_m *Workbook) AddProblem(ctx context.Context, operator domain.StudentModel, param service.ProblemAddParameter) ([]domain.ProblemID, []domain.ProblemID, []domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) []domain.ProblemID); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 []domain.ProblemID
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) []domain.ProblemID); ok {
		r1 = rf(ctx, operator, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ProblemID)
		}
	}

	var r2 []domain.ProblemID
	if rf, ok := ret.Get(2).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) []domain.ProblemID); ok {
		r2 = rf(ctx, operator, param)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.ProblemID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.StudentModel, service.ProblemAddParameter) error); ok {
		r3 = rf(ctx, operator, param)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CountProblems provides a mock function with given fields: ctx, operator
func (_m *Workbook) CountProblems(ctx context.Context, operator domain.StudentModel) (int, error) {
	ret := _m.Called(ctx, operator)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel) int); ok {
		r0 = rf(ctx, operator)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllProblems provides a mock function with given fields: ctx, operator
func (_m *Workbook) FindAllProblems(ctx context.Context, operator domain.StudentModel) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemByID provides a mock function with given fields: ctx, operator, problemID
func (_m *Workbook) FindProblemByID(ctx context.Context, operator domain.StudentModel, problemID domain.ProblemID) (service.Problem, error) {
	ret := _m.Called(ctx, operator, problemID)

	var r0 service.Problem
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, domain.ProblemID) service.Problem); ok {
		r0 = rf(ctx, operator, problemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Problem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, domain.ProblemID) error); ok {
		r1 = rf(ctx, operator, problemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemIDs provides a mock function with given fields: ctx, operator
func (_m *Workbook) FindProblemIDs(ctx context.Context, operator domain.StudentModel) ([]domain.ProblemID, error) {
	ret := _m.Called(ctx, operator)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel) []domain.ProblemID); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblems provides a mock function with given fields: ctx, operator, param
func (_m *Workbook) FindProblems(ctx context.Context, operator domain.StudentModel, param service.ProblemSearchCondition) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSearchCondition) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSearchCondition) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProblemsByProblemIDs provides a mock function with given fields: ctx, operator, param
func (_m *Workbook) FindProblemsByProblemIDs(ctx context.Context, operator domain.StudentModel, param service.ProblemIDsCondition) (service.ProblemSearchResult, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 service.ProblemSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemIDsCondition) service.ProblemSearchResult); ok {
		r0 = rf(ctx, operator, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemIDsCondition) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreatedAt provides a mock function with given fields:
func (_m *Workbook) GetCreatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetCreatedBy provides a mock function with given fields:
func (_m *Workbook) GetCreatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *Workbook) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetLang2 provides a mock function with given fields:
func (_m *Workbook) GetLang2() domain.Lang2 {
	ret := _m.Called()

	var r0 domain.Lang2
	if rf, ok := ret.Get(0).(func() domain.Lang2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Lang2)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *Workbook) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOwnerID provides a mock function with given fields:
func (_m *Workbook) GetOwnerID() userdomain.AppUserID {
	ret := _m.Called()

	var r0 userdomain.AppUserID
	if rf, ok := ret.Get(0).(func() userdomain.AppUserID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(userdomain.AppUserID)
	}

	return r0
}

// GetProblemType provides a mock function with given fields:
func (_m *Workbook) GetProblemType() domain.ProblemTypeName {
	ret := _m.Called()

	var r0 domain.ProblemTypeName
	if rf, ok := ret.Get(0).(func() domain.ProblemTypeName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ProblemTypeName)
	}

	return r0
}

// GetProperties provides a mock function with given fields:
func (_m *Workbook) GetProperties() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetQuestionText provides a mock function with given fields:
func (_m *Workbook) GetQuestionText() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSpaceID provides a mock function with given fields:
func (_m *Workbook) GetSpaceID() userdomain.SpaceID {
	ret := _m.Called()

	var r0 userdomain.SpaceID
	if rf, ok := ret.Get(0).(func() userdomain.SpaceID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(userdomain.SpaceID)
	}

	return r0
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *Workbook) GetUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUpdatedBy provides a mock function with given fields:
func (_m *Workbook) GetUpdatedBy() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *Workbook) GetVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetWorkbookID provides a mock function with given fields:
func (_m *Workbook) GetWorkbookID() domain.WorkbookID {
	ret := _m.Called()

	var r0 domain.WorkbookID
	if rf, ok := ret.Get(0).(func() domain.WorkbookID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.WorkbookID)
	}

	return r0
}

// HasPrivilege provides a mock function with given fields: privilege
func (_m *Workbook) HasPrivilege(privilege userdomain.RBACAction) bool {
	ret := _m.Called(privilege)

	var r0 bool
	if rf, ok := ret.Get(0).(func(userdomain.RBACAction) bool); ok {
		r0 = rf(privilege)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveProblem provides a mock function with given fields: ctx, operator, id
func (_m *Workbook) RemoveProblem(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter2) ([]domain.ProblemID, []domain.ProblemID, []domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, id)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2) []domain.ProblemID); ok {
		r0 = rf(ctx, operator, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 []domain.ProblemID
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2) []domain.ProblemID); ok {
		r1 = rf(ctx, operator, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ProblemID)
		}
	}

	var r2 []domain.ProblemID
	if rf, ok := ret.Get(2).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2) []domain.ProblemID); ok {
		r2 = rf(ctx, operator, id)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.ProblemID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2) error); ok {
		r3 = rf(ctx, operator, id)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RemoveWorkbook provides a mock function with given fields: ctx, operator, version
func (_m *Workbook) RemoveWorkbook(ctx context.Context, operator domain.StudentModel, version int) error {
	ret := _m.Called(ctx, operator, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, int) error); ok {
		r0 = rf(ctx, operator, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProblem provides a mock function with given fields: ctx, operator, id, param
func (_m *Workbook) UpdateProblem(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter2, param service.ProblemUpdateParameter) ([]domain.ProblemID, []domain.ProblemID, []domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, id, param)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r0 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 []domain.ProblemID
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r1 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ProblemID)
		}
	}

	var r2 []domain.ProblemID
	if rf, ok := ret.Get(2).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r2 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.ProblemID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) error); ok {
		r3 = rf(ctx, operator, id, param)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateProblemProperty provides a mock function with given fields: ctx, operator, id, param
func (_m *Workbook) UpdateProblemProperty(ctx context.Context, operator domain.StudentModel, id service.ProblemSelectParameter2, param service.ProblemUpdateParameter) ([]domain.ProblemID, []domain.ProblemID, []domain.ProblemID, error) {
	ret := _m.Called(ctx, operator, id, param)

	var r0 []domain.ProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r0 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProblemID)
		}
	}

	var r1 []domain.ProblemID
	if rf, ok := ret.Get(1).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r1 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.ProblemID)
		}
	}

	var r2 []domain.ProblemID
	if rf, ok := ret.Get(2).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) []domain.ProblemID); ok {
		r2 = rf(ctx, operator, id, param)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]domain.ProblemID)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, domain.StudentModel, service.ProblemSelectParameter2, service.ProblemUpdateParameter) error); ok {
		r3 = rf(ctx, operator, id, param)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateWorkbook provides a mock function with given fields: ctx, operator, version, parameter
func (_m *Workbook) UpdateWorkbook(ctx context.Context, operator domain.StudentModel, version int, parameter domain.WorkbookUpdateParameter) error {
	ret := _m.Called(ctx, operator, version, parameter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, int, domain.WorkbookUpdateParameter) error); ok {
		r0 = rf(ctx, operator, version, parameter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkbook creates a new instance of Workbook. It also registers a cleanup function to assert the mocks expectations.
func NewWorkbook(t testing.TB) *Workbook {
	mock := &Workbook{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

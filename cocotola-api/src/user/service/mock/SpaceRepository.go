// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/user/service"

	testing "testing"
)

// SpaceRepository is an autogenerated mock type for the SpaceRepository type
type SpaceRepository struct {
	mock.Mock
}

// AddDefaultSpace provides a mock function with given fields: ctx, operator
func (_m *SpaceRepository) AddDefaultSpace(ctx context.Context, operator domain.SystemOwnerModel) (uint, error) {
	ret := _m.Called(ctx, operator)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemOwnerModel) uint); ok {
		r0 = rf(ctx, operator)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemOwnerModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddPersonalSpace provides a mock function with given fields: ctx, operator, appUser
func (_m *SpaceRepository) AddPersonalSpace(ctx context.Context, operator domain.SystemOwnerModel, appUser domain.AppUserModel) (domain.SpaceID, error) {
	ret := _m.Called(ctx, operator, appUser)

	var r0 domain.SpaceID
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemOwnerModel, domain.AppUserModel) domain.SpaceID); ok {
		r0 = rf(ctx, operator, appUser)
	} else {
		r0 = ret.Get(0).(domain.SpaceID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemOwnerModel, domain.AppUserModel) error); ok {
		r1 = rf(ctx, operator, appUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSystemSpace provides a mock function with given fields: ctx, operator
func (_m *SpaceRepository) AddSystemSpace(ctx context.Context, operator domain.SystemOwnerModel) (domain.SpaceID, error) {
	ret := _m.Called(ctx, operator)

	var r0 domain.SpaceID
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemOwnerModel) domain.SpaceID); ok {
		r0 = rf(ctx, operator)
	} else {
		r0 = ret.Get(0).(domain.SpaceID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemOwnerModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDefaultSpace provides a mock function with given fields: ctx, operator
func (_m *SpaceRepository) FindDefaultSpace(ctx context.Context, operator domain.AppUserModel) (service.Space, error) {
	ret := _m.Called(ctx, operator)

	var r0 service.Space
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel) service.Space); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Space)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPersonalSpace provides a mock function with given fields: ctx, operator
func (_m *SpaceRepository) FindPersonalSpace(ctx context.Context, operator domain.AppUserModel) (service.Space, error) {
	ret := _m.Called(ctx, operator)

	var r0 service.Space
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel) service.Space); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Space)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSystemSpace provides a mock function with given fields: ctx, operator
func (_m *SpaceRepository) FindSystemSpace(ctx context.Context, operator domain.AppUserModel) (service.Space, error) {
	ret := _m.Called(ctx, operator)

	var r0 service.Space
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel) service.Space); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Space)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSpaceRepository creates a new instance of SpaceRepository. It also registers a cleanup function to assert the mocks expectations.
func NewSpaceRepository(t testing.TB) *SpaceRepository {
	mock := &SpaceRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdomain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"
)

// StudentUsecaseAudio is an autogenerated mock type for the StudentUsecaseAudio type
type StudentUsecaseAudio struct {
	mock.Mock
}

// FindAudioByID provides a mock function with given fields: ctx, organizationID, operatorID, workbookID, problemID, audioID
func (_m *StudentUsecaseAudio) FindAudioByID(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID, problemID appdomain.ProblemID, audioID appdomain.AudioID) (service.Audio, error) {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID, problemID, audioID)

	var r0 service.Audio
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, appdomain.ProblemID, appdomain.AudioID) service.Audio); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID, problemID, audioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Audio)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, appdomain.ProblemID, appdomain.AudioID) error); ok {
		r1 = rf(ctx, organizationID, operatorID, workbookID, problemID, audioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStudentUsecaseAudio creates a new instance of StudentUsecaseAudio. It also registers a cleanup function to assert the mocks expectations.
func NewStudentUsecaseAudio(t testing.TB) *StudentUsecaseAudio {
	mock := &StudentUsecaseAudio{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

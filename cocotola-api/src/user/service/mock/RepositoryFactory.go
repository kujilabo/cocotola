// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	testing "testing"

	service "github.com/kujilabo/cocotola/cocotola-api/src/user/service"
	mock "github.com/stretchr/testify/mock"
)

// RepositoryFactory is an autogenerated mock type for the RepositoryFactory type
type RepositoryFactory struct {
	mock.Mock
}

// NewAppUserGroupRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewAppUserGroupRepository() (service.AppUserGroupRepository, error) {
	ret := _m.Called()

	var r0 service.AppUserGroupRepository
	if rf, ok := ret.Get(0).(func() service.AppUserGroupRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AppUserGroupRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppUserRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewAppUserRepository() (service.AppUserRepository, error) {
	ret := _m.Called()

	var r0 service.AppUserRepository
	if rf, ok := ret.Get(0).(func() service.AppUserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.AppUserRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroupUserRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewGroupUserRepository() (service.GroupUserRepository, error) {
	ret := _m.Called()

	var r0 service.GroupUserRepository
	if rf, ok := ret.Get(0).(func() service.GroupUserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.GroupUserRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewOrganizationRepository() (service.OrganizationRepository, error) {
	ret := _m.Called()

	var r0 service.OrganizationRepository
	if rf, ok := ret.Get(0).(func() service.OrganizationRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.OrganizationRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRBACRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewRBACRepository() (service.RBACRepository, error) {
	ret := _m.Called()

	var r0 service.RBACRepository
	if rf, ok := ret.Get(0).(func() service.RBACRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.RBACRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSpaceRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewSpaceRepository() (service.SpaceRepository, error) {
	ret := _m.Called()

	var r0 service.SpaceRepository
	if rf, ok := ret.Get(0).(func() service.SpaceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.SpaceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserSpaceRepository provides a mock function with given fields:
func (_m *RepositoryFactory) NewUserSpaceRepository() (service.UserSpaceRepository, error) {
	ret := _m.Called()

	var r0 service.UserSpaceRepository
	if rf, ok := ret.Get(0).(func() service.UserSpaceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.UserSpaceRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryFactory creates a new instance of RepositoryFactory. It also registers a cleanup function to assert the mocks expectations.
func NewRepositoryFactory(t testing.TB) *RepositoryFactory {
	mock := &RepositoryFactory{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

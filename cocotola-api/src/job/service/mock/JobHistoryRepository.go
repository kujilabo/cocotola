// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/job/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/job/service"

	testing "testing"
)

// JobHistoryRepository is an autogenerated mock type for the JobHistoryRepository type
type JobHistoryRepository struct {
	mock.Mock
}

// AddJobHistory provides a mock function with given fields: ctx, param
func (_m *JobHistoryRepository) AddJobHistory(ctx context.Context, param service.JobHistoryAddParameter) error {
	ret := _m.Called(ctx, param)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.JobHistoryAddParameter) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindJobHistoryByJobName provides a mock function with given fields: ctx, jobName
func (_m *JobHistoryRepository) FindJobHistoryByJobName(ctx context.Context, jobName domain.JobName) (service.JobHistory, error) {
	ret := _m.Called(ctx, jobName)

	var r0 service.JobHistory
	if rf, ok := ret.Get(0).(func(context.Context, domain.JobName) service.JobHistory); ok {
		r0 = rf(ctx, jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.JobHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.JobName) error); ok {
		r1 = rf(ctx, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJobHistoryRepository creates a new instance of JobHistoryRepository. It also registers a cleanup function to assert the mocks expectations.
func NewJobHistoryRepository(t testing.TB) *JobHistoryRepository {
	mock := &JobHistoryRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

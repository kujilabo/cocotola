// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdomain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// StudentUsecaseWorkbook is an autogenerated mock type for the StudentUsecaseWorkbook type
type StudentUsecaseWorkbook struct {
	mock.Mock
}

// AddWorkbook provides a mock function with given fields: ctx, organizationID, operatorID, parameter
func (_m *StudentUsecaseWorkbook) AddWorkbook(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, parameter appdomain.WorkbookAddParameter) (appdomain.WorkbookID, error) {
	ret := _m.Called(ctx, organizationID, operatorID, parameter)

	var r0 appdomain.WorkbookID
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookAddParameter) appdomain.WorkbookID); ok {
		r0 = rf(ctx, organizationID, operatorID, parameter)
	} else {
		r0 = ret.Get(0).(appdomain.WorkbookID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookAddParameter) error); ok {
		r1 = rf(ctx, organizationID, operatorID, parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkbookByID provides a mock function with given fields: ctx, organizationID, operatorID, workBookID
func (_m *StudentUsecaseWorkbook) FindWorkbookByID(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workBookID appdomain.WorkbookID) (appdomain.WorkbookModel, error) {
	ret := _m.Called(ctx, organizationID, operatorID, workBookID)

	var r0 appdomain.WorkbookModel
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID) appdomain.WorkbookModel); ok {
		r0 = rf(ctx, organizationID, operatorID, workBookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appdomain.WorkbookModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID) error); ok {
		r1 = rf(ctx, organizationID, operatorID, workBookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkbooks provides a mock function with given fields: ctx, organizationID, operatorID
func (_m *StudentUsecaseWorkbook) FindWorkbooks(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID) (appdomain.WorkbookSearchResult, error) {
	ret := _m.Called(ctx, organizationID, operatorID)

	var r0 appdomain.WorkbookSearchResult
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID) appdomain.WorkbookSearchResult); ok {
		r0 = rf(ctx, organizationID, operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appdomain.WorkbookSearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID) error); ok {
		r1 = rf(ctx, organizationID, operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveWorkbook provides a mock function with given fields: ctx, organizationID, operatorID, workbookID, version
func (_m *StudentUsecaseWorkbook) RemoveWorkbook(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID, version int) error {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, int) error); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWorkbook provides a mock function with given fields: ctx, organizationID, operatorID, workbookID, version, parameter
func (_m *StudentUsecaseWorkbook) UpdateWorkbook(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID, version int, parameter appdomain.WorkbookUpdateParameter) error {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID, version, parameter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, int, appdomain.WorkbookUpdateParameter) error); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID, version, parameter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStudentUsecaseWorkbook creates a new instance of StudentUsecaseWorkbook. It also registers a cleanup function to assert the mocks expectations.
func NewStudentUsecaseWorkbook(t testing.TB) *StudentUsecaseWorkbook {
	mock := &StudentUsecaseWorkbook{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

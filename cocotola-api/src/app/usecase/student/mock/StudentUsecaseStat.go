// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"
)

// StudentUsecaseStat is an autogenerated mock type for the StudentUsecaseStat type
type StudentUsecaseStat struct {
	mock.Mock
}

// GetStat provides a mock function with given fields: ctx, organizationID, operatorID
func (_m *StudentUsecaseStat) GetStat(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID) (service.Stat, error) {
	ret := _m.Called(ctx, organizationID, operatorID)

	var r0 service.Stat
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID) service.Stat); ok {
		r0 = rf(ctx, organizationID, operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Stat)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID) error); ok {
		r1 = rf(ctx, organizationID, operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStudentUsecaseStat creates a new instance of StudentUsecaseStat. It also registers a cleanup function to assert the mocks expectations.
func NewStudentUsecaseStat(t testing.TB) *StudentUsecaseStat {
	mock := &StudentUsecaseStat{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdomain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// StudentUsecaseStudy is an autogenerated mock type for the StudentUsecaseStudy type
type StudentUsecaseStudy struct {
	mock.Mock
}

// FindResults provides a mock function with given fields: ctx, organizationID, operatorID, workbookID, studyType
func (_m *StudentUsecaseStudy) FindResults(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID, studyType string) ([]appdomain.StudyRecordWithProblemID, error) {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID, studyType)

	var r0 []appdomain.StudyRecordWithProblemID
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, string) []appdomain.StudyRecordWithProblemID); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID, studyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appdomain.StudyRecordWithProblemID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, string) error); ok {
		r1 = rf(ctx, organizationID, operatorID, workbookID, studyType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompletionRate provides a mock function with given fields: ctx, organizationID, operatorID, workbookID
func (_m *StudentUsecaseStudy) GetCompletionRate(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID) (map[string]int, error) {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID) map[string]int); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID) error); ok {
		r1 = rf(ctx, organizationID, operatorID, workbookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetResult provides a mock function with given fields: ctx, organizationID, operatorID, workbookID, studyType, problemID, result, mastered
func (_m *StudentUsecaseStudy) SetResult(ctx context.Context, organizationID domain.OrganizationID, operatorID domain.AppUserID, workbookID appdomain.WorkbookID, studyType string, problemID appdomain.ProblemID, result bool, mastered bool) error {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID, studyType, problemID, result, mastered)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.OrganizationID, domain.AppUserID, appdomain.WorkbookID, string, appdomain.ProblemID, bool, bool) error); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID, studyType, problemID, result, mastered)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStudentUsecaseStudy creates a new instance of StudentUsecaseStudy. It also registers a cleanup function to assert the mocks expectations.
func NewStudentUsecaseStudy(t testing.TB) *StudentUsecaseStudy {
	mock := &StudentUsecaseStudy{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

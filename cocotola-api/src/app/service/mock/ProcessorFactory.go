// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"
)

// ProcessorFactory is an autogenerated mock type for the ProcessorFactory type
type ProcessorFactory struct {
	mock.Mock
}

// NewProblemAddProcessor provides a mock function with given fields: problemType
func (_m *ProcessorFactory) NewProblemAddProcessor(problemType domain.ProblemTypeName) (service.ProblemAddProcessor, error) {
	ret := _m.Called(problemType)

	var r0 service.ProblemAddProcessor
	if rf, ok := ret.Get(0).(func(domain.ProblemTypeName) service.ProblemAddProcessor); ok {
		r0 = rf(problemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemAddProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ProblemTypeName) error); ok {
		r1 = rf(problemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProblemImportProcessor provides a mock function with given fields: problemType
func (_m *ProcessorFactory) NewProblemImportProcessor(problemType domain.ProblemTypeName) (service.ProblemImportProcessor, error) {
	ret := _m.Called(problemType)

	var r0 service.ProblemImportProcessor
	if rf, ok := ret.Get(0).(func(domain.ProblemTypeName) service.ProblemImportProcessor); ok {
		r0 = rf(problemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemImportProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ProblemTypeName) error); ok {
		r1 = rf(problemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProblemQuotaProcessor provides a mock function with given fields: problemType
func (_m *ProcessorFactory) NewProblemQuotaProcessor(problemType domain.ProblemTypeName) (service.ProblemQuotaProcessor, error) {
	ret := _m.Called(problemType)

	var r0 service.ProblemQuotaProcessor
	if rf, ok := ret.Get(0).(func(domain.ProblemTypeName) service.ProblemQuotaProcessor); ok {
		r0 = rf(problemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemQuotaProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ProblemTypeName) error); ok {
		r1 = rf(problemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProblemRemoveProcessor provides a mock function with given fields: problemType
func (_m *ProcessorFactory) NewProblemRemoveProcessor(problemType domain.ProblemTypeName) (service.ProblemRemoveProcessor, error) {
	ret := _m.Called(problemType)

	var r0 service.ProblemRemoveProcessor
	if rf, ok := ret.Get(0).(func(domain.ProblemTypeName) service.ProblemRemoveProcessor); ok {
		r0 = rf(problemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemRemoveProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ProblemTypeName) error); ok {
		r1 = rf(problemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProblemUpdateProcessor provides a mock function with given fields: problemType
func (_m *ProcessorFactory) NewProblemUpdateProcessor(problemType domain.ProblemTypeName) (service.ProblemUpdateProcessor, error) {
	ret := _m.Called(problemType)

	var r0 service.ProblemUpdateProcessor
	if rf, ok := ret.Get(0).(func(domain.ProblemTypeName) service.ProblemUpdateProcessor); ok {
		r0 = rf(problemType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.ProblemUpdateProcessor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.ProblemTypeName) error); ok {
		r1 = rf(problemType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProcessorFactory creates a new instance of ProcessorFactory. It also registers a cleanup function to assert the mocks expectations.
func NewProcessorFactory(t testing.TB) *ProcessorFactory {
	mock := &ProcessorFactory{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

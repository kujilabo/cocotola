// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appdomain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"

	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"

	time "time"
)

// RecordbookRepository is an autogenerated mock type for the RecordbookRepository type
type RecordbookRepository struct {
	mock.Mock
}

// CountAnsweredProblems provides a mock function with given fields: ctx, targetUserID, targetDate
func (_m *RecordbookRepository) CountAnsweredProblems(ctx context.Context, targetUserID domain.AppUserID, targetDate time.Time) (*service.CountAnsweredResults, error) {
	ret := _m.Called(ctx, targetUserID, targetDate)

	var r0 *service.CountAnsweredResults
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserID, time.Time) *service.CountAnsweredResults); ok {
		r0 = rf(ctx, targetUserID, targetDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CountAnsweredResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserID, time.Time) error); ok {
		r1 = rf(ctx, targetUserID, targetDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountMasteredProblems provides a mock function with given fields: ctx, operator, workbookID
func (_m *RecordbookRepository) CountMasteredProblems(ctx context.Context, operator appdomain.StudentModel, workbookID appdomain.WorkbookID) (map[string]int, error) {
	ret := _m.Called(ctx, operator, workbookID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID) map[string]int); ok {
		r0 = rf(ctx, operator, workbookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID) error); ok {
		r1 = rf(ctx, operator, workbookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStudyRecords provides a mock function with given fields: ctx, operator, workbookID, studyType
func (_m *RecordbookRepository) FindStudyRecords(ctx context.Context, operator appdomain.StudentModel, workbookID appdomain.WorkbookID, studyType string) (map[appdomain.ProblemID]appdomain.StudyRecord, error) {
	ret := _m.Called(ctx, operator, workbookID, studyType)

	var r0 map[appdomain.ProblemID]appdomain.StudyRecord
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID, string) map[appdomain.ProblemID]appdomain.StudyRecord); ok {
		r0 = rf(ctx, operator, workbookID, studyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[appdomain.ProblemID]appdomain.StudyRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID, string) error); ok {
		r1 = rf(ctx, operator, workbookID, studyType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetResult provides a mock function with given fields: ctx, operator, workbookID, studyType, problemType, problemID, studyResult, mastered
func (_m *RecordbookRepository) SetResult(ctx context.Context, operator appdomain.StudentModel, workbookID appdomain.WorkbookID, studyType string, problemType string, problemID appdomain.ProblemID, studyResult bool, mastered bool) error {
	ret := _m.Called(ctx, operator, workbookID, studyType, problemType, problemID, studyResult, mastered)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, appdomain.StudentModel, appdomain.WorkbookID, string, string, appdomain.ProblemID, bool, bool) error); ok {
		r0 = rf(ctx, operator, workbookID, studyType, problemType, problemID, studyResult, mastered)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordbookRepository creates a new instance of RecordbookRepository. It also registers a cleanup function to assert the mocks expectations.
func NewRecordbookRepository(t testing.TB) *RecordbookRepository {
	mock := &RecordbookRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/user/service"

	testing "testing"
)

// OrganizationRepository is an autogenerated mock type for the OrganizationRepository type
type OrganizationRepository struct {
	mock.Mock
}

// AddOrganization provides a mock function with given fields: ctx, operator, param
func (_m *OrganizationRepository) AddOrganization(ctx context.Context, operator domain.SystemAdminModel, param service.OrganizationAddParameter) (domain.OrganizationID, error) {
	ret := _m.Called(ctx, operator, param)

	var r0 domain.OrganizationID
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemAdminModel, service.OrganizationAddParameter) domain.OrganizationID); ok {
		r0 = rf(ctx, operator, param)
	} else {
		r0 = ret.Get(0).(domain.OrganizationID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemAdminModel, service.OrganizationAddParameter) error); ok {
		r1 = rf(ctx, operator, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizationByID provides a mock function with given fields: ctx, operator, id
func (_m *OrganizationRepository) FindOrganizationByID(ctx context.Context, operator domain.SystemAdminModel, id domain.OrganizationID) (service.Organization, error) {
	ret := _m.Called(ctx, operator, id)

	var r0 service.Organization
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemAdminModel, domain.OrganizationID) service.Organization); ok {
		r0 = rf(ctx, operator, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemAdminModel, domain.OrganizationID) error); ok {
		r1 = rf(ctx, operator, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrganizationByName provides a mock function with given fields: ctx, operator, name
func (_m *OrganizationRepository) FindOrganizationByName(ctx context.Context, operator domain.SystemAdminModel, name string) (service.Organization, error) {
	ret := _m.Called(ctx, operator, name)

	var r0 service.Organization
	if rf, ok := ret.Get(0).(func(context.Context, domain.SystemAdminModel, string) service.Organization); ok {
		r0 = rf(ctx, operator, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.SystemAdminModel, string) error); ok {
		r1 = rf(ctx, operator, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganization provides a mock function with given fields: ctx, operator
func (_m *OrganizationRepository) GetOrganization(ctx context.Context, operator domain.AppUserModel) (service.Organization, error) {
	ret := _m.Called(ctx, operator)

	var r0 service.Organization
	if rf, ok := ret.Get(0).(func(context.Context, domain.AppUserModel) service.Organization); ok {
		r0 = rf(ctx, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AppUserModel) error); ok {
		r1 = rf(ctx, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationRepository creates a new instance of OrganizationRepository. It also registers a cleanup function to assert the mocks expectations.
func NewOrganizationRepository(t testing.TB) *OrganizationRepository {
	mock := &OrganizationRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola/cocotola-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola/cocotola-api/src/app/service"

	testing "testing"

	time "time"

	userdomain "github.com/kujilabo/cocotola/cocotola-api/src/user/domain"
)

// StudyRecordRepository is an autogenerated mock type for the StudyRecordRepository type
type StudyRecordRepository struct {
	mock.Mock
}

// AddRecord provides a mock function with given fields: ctx, operator, workbookID, problemType, studyType, problemID, mastered
func (_m *StudyRecordRepository) AddRecord(ctx context.Context, operator domain.StudentModel, workbookID domain.WorkbookID, problemType domain.ProblemTypeName, studyType domain.StudyTypeName, problemID domain.ProblemID, mastered bool) error {
	ret := _m.Called(ctx, operator, workbookID, problemType, studyType, problemID, mastered)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.StudentModel, domain.WorkbookID, domain.ProblemTypeName, domain.StudyTypeName, domain.ProblemID, bool) error); ok {
		r0 = rf(ctx, operator, workbookID, problemType, studyType, problemID, mastered)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountAnsweredProblems provides a mock function with given fields: ctx, operator, targetUserID, targetDate
func (_m *StudyRecordRepository) CountAnsweredProblems(ctx context.Context, operator userdomain.SystemOwnerModel, targetUserID userdomain.AppUserID, targetDate time.Time) (*service.CountAnsweredResults, error) {
	ret := _m.Called(ctx, operator, targetUserID, targetDate)

	var r0 *service.CountAnsweredResults
	if rf, ok := ret.Get(0).(func(context.Context, userdomain.SystemOwnerModel, userdomain.AppUserID, time.Time) *service.CountAnsweredResults); ok {
		r0 = rf(ctx, operator, targetUserID, targetDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.CountAnsweredResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, userdomain.SystemOwnerModel, userdomain.AppUserID, time.Time) error); ok {
		r1 = rf(ctx, operator, targetUserID, targetDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStudyRecordRepository creates a new instance of StudyRecordRepository. It also registers a cleanup function to assert the mocks expectations.
func NewStudyRecordRepository(t testing.TB) *StudyRecordRepository {
	mock := &StudyRecordRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
